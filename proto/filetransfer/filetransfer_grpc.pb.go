// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/filetransfer/filetransfer.proto

package filetransfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	MasterRequest(ctx context.Context, in *MasterNodeRequest, opts ...grpc.CallOption) (*MasterNodeResponse, error)
	MasterElectBroadcast(ctx context.Context, in *MasterElectRequest, opts ...grpc.CallOption) (*MasterElectResponse, error)
	MasterAskToReplicate(ctx context.Context, in *MasterReplicateRequest, opts ...grpc.CallOption) (*MasterReplicateResponse, error)
	// client ask master to initialize models on clusters
	StartJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// client ask master to start inferencing on model
	StartInference(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// Master asks each member to intialize their models
	AskMemberToInitializeModels(ctx context.Context, in *ModelTrainRequest, opts ...grpc.CallOption) (*ModelTrainResponse, error)
	// Master asks each member to remove their models
	AskMemberToRemoveModels(ctx context.Context, in *ModelRemoveRequest, opts ...grpc.CallOption) (*ModelRemoveResponse, error)
	// Tells a VM that these replicas have inferenece files you have
	SendJobInformation(ctx context.Context, in *JobInformationRequest, opts ...grpc.CallOption) (*JobInformationResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/filetransfer.FileService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadClient{stream}
	return x, nil
}

type FileService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileServiceUploadClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/filetransfer.FileService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) MasterRequest(ctx context.Context, in *MasterNodeRequest, opts ...grpc.CallOption) (*MasterNodeResponse, error) {
	out := new(MasterNodeResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/MasterRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) MasterElectBroadcast(ctx context.Context, in *MasterElectRequest, opts ...grpc.CallOption) (*MasterElectResponse, error) {
	out := new(MasterElectResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/MasterElectBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) MasterAskToReplicate(ctx context.Context, in *MasterReplicateRequest, opts ...grpc.CallOption) (*MasterReplicateResponse, error) {
	out := new(MasterReplicateResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/MasterAskToReplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) StartJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) StartInference(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/StartInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AskMemberToInitializeModels(ctx context.Context, in *ModelTrainRequest, opts ...grpc.CallOption) (*ModelTrainResponse, error) {
	out := new(ModelTrainResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/AskMemberToInitializeModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AskMemberToRemoveModels(ctx context.Context, in *ModelRemoveRequest, opts ...grpc.CallOption) (*ModelRemoveResponse, error) {
	out := new(ModelRemoveResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/AskMemberToRemoveModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SendJobInformation(ctx context.Context, in *JobInformationRequest, opts ...grpc.CallOption) (*JobInformationResponse, error) {
	out := new(JobInformationResponse)
	err := c.cc.Invoke(ctx, "/filetransfer.FileService/SendJobInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	Upload(FileService_UploadServer) error
	Download(*DownloadRequest, FileService_DownloadServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	MasterRequest(context.Context, *MasterNodeRequest) (*MasterNodeResponse, error)
	MasterElectBroadcast(context.Context, *MasterElectRequest) (*MasterElectResponse, error)
	MasterAskToReplicate(context.Context, *MasterReplicateRequest) (*MasterReplicateResponse, error)
	// client ask master to initialize models on clusters
	StartJob(context.Context, *JobRequest) (*JobResponse, error)
	// client ask master to start inferencing on model
	StartInference(context.Context, *JobRequest) (*JobResponse, error)
	// Master asks each member to intialize their models
	AskMemberToInitializeModels(context.Context, *ModelTrainRequest) (*ModelTrainResponse, error)
	// Master asks each member to remove their models
	AskMemberToRemoveModels(context.Context, *ModelRemoveRequest) (*ModelRemoveResponse, error)
	// Tells a VM that these replicas have inferenece files you have
	SendJobInformation(context.Context, *JobInformationRequest) (*JobInformationResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Upload(FileService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileServiceServer) Download(*DownloadRequest, FileService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileServiceServer) MasterRequest(context.Context, *MasterNodeRequest) (*MasterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterRequest not implemented")
}
func (UnimplementedFileServiceServer) MasterElectBroadcast(context.Context, *MasterElectRequest) (*MasterElectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterElectBroadcast not implemented")
}
func (UnimplementedFileServiceServer) MasterAskToReplicate(context.Context, *MasterReplicateRequest) (*MasterReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterAskToReplicate not implemented")
}
func (UnimplementedFileServiceServer) StartJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedFileServiceServer) StartInference(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInference not implemented")
}
func (UnimplementedFileServiceServer) AskMemberToInitializeModels(context.Context, *ModelTrainRequest) (*ModelTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskMemberToInitializeModels not implemented")
}
func (UnimplementedFileServiceServer) AskMemberToRemoveModels(context.Context, *ModelRemoveRequest) (*ModelRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskMemberToRemoveModels not implemented")
}
func (UnimplementedFileServiceServer) SendJobInformation(context.Context, *JobInformationRequest) (*JobInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobInformation not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).Upload(&fileServiceUploadServer{stream})
}

type FileService_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type fileServiceUploadServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).Download(m, &fileServiceDownloadServer{stream})
}

type FileService_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_MasterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).MasterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/MasterRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).MasterRequest(ctx, req.(*MasterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_MasterElectBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterElectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).MasterElectBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/MasterElectBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).MasterElectBroadcast(ctx, req.(*MasterElectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_MasterAskToReplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).MasterAskToReplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/MasterAskToReplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).MasterAskToReplicate(ctx, req.(*MasterReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).StartJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_StartInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).StartInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/StartInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).StartInference(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AskMemberToInitializeModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AskMemberToInitializeModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/AskMemberToInitializeModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AskMemberToInitializeModels(ctx, req.(*ModelTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AskMemberToRemoveModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AskMemberToRemoveModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/AskMemberToRemoveModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AskMemberToRemoveModels(ctx, req.(*ModelRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SendJobInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SendJobInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filetransfer.FileService/SendJobInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SendJobInformation(ctx, req.(*JobInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _FileService_Delete_Handler,
		},
		{
			MethodName: "MasterRequest",
			Handler:    _FileService_MasterRequest_Handler,
		},
		{
			MethodName: "MasterElectBroadcast",
			Handler:    _FileService_MasterElectBroadcast_Handler,
		},
		{
			MethodName: "MasterAskToReplicate",
			Handler:    _FileService_MasterAskToReplicate_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _FileService_StartJob_Handler,
		},
		{
			MethodName: "StartInference",
			Handler:    _FileService_StartInference_Handler,
		},
		{
			MethodName: "AskMemberToInitializeModels",
			Handler:    _FileService_AskMemberToInitializeModels_Handler,
		},
		{
			MethodName: "AskMemberToRemoveModels",
			Handler:    _FileService_AskMemberToRemoveModels_Handler,
		},
		{
			MethodName: "SendJobInformation",
			Handler:    _FileService_SendJobInformation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _FileService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filetransfer/filetransfer.proto",
}
